namespace ray.streaming.queue.flatbuf;

enum MessageType:long {
  // Check ready or not
  StreamingQueueCheckMsg = 0,
  StreamingQueueCheckRspMsg,
  // Notify consumed
  StreamingQueueNotificationMsg,
  // Message
  StreamingQueueDataMsg,
  //
  StreamingQueueGetLastMsgId,
  StreamingQueueGetLastMsgIdRsp,
  // For test
  StreamingQueueTestInitMsg,
  StreamingQueueTestCheckStatusRspMsg,
}

enum StreamingQueueError:int {
  OK,
  QUEUE_NOT_EXIST,
  NO_VALID_DATA_TO_PULL,
}

table StreamingQueueCheckMsg {
  src_actor_id: string;
  dst_actor_id: string;
  queue_id: string;
}

table StreamingQueueCheckRspMsg {
  src_actor_id: string;
  dst_actor_id: string;
  queue_id: string;
  err_code: StreamingQueueError;
}

table StreamingQueueNotificationMsg {
  src_actor_id: string;
  dst_actor_id: string;
  queue_id: string;
  seq_id: ulong;
}

table StreamingQueueDataMsg {
  src_actor_id: string;
  dst_actor_id: string;
  queue_id: string;
  seq_id: ulong;
  length: ulong;
  raw: bool;
}

// for test
enum StreamingQueueTestRole:int {
  WRITER,
  READER,
}

table StreamingQueueTestInitMsg {
  role: StreamingQueueTestRole;
  src_actor_id: string;
  dst_actor_id: string;
  actor_handle: string;
  queue_ids: [string];
  rescale_queue_ids: [string];
  test_suite_name: string;
  test_name: string;
  param: ulong;
}

table StreamingQueueTestCheckStatusRspMsg {
  test_name: string;
  status: bool;
}
