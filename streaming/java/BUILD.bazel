load("//bazel:ray.bzl", "define_java_module")
load("//:streaming/streaming.bzl", "flatbuffer_java_library")
load("@bazel_common//tools/maven:pom_file.bzl", "pom_file")

exports_files([
    "testng.xml",
])

all_modules = [
    "streaming-api",
    "streaming-runtime",
]

java_import(
    name = "all_modules",
    jars = [
        "liborg_ray_ray_" + module + ".jar" for module in all_modules
    ] + [
        "liborg_ray_ray_" + module + "-src.jar" for module in all_modules
    ] + [
        "all_streaming_tests_deploy.jar",
        "all_streaming_tests_deploy-src.jar",
    ],
    deps = [
        ":org_ray_ray_" + module for module in all_modules
    ] + [
        ":all_streaming_tests",
    ],
)

define_java_module(
    name = "streaming-api",
    deps = [
        "@ray_streaming_maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:org_slf4j_slf4j_log4j12",
        "@ray_streaming_maven//:com_google_guava_guava",
    ],
    define_test_lib = True,
    test_deps = [
        "//java:org_ray_ray_api",
        ":org_ray_ray_streaming-api",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@ray_streaming_maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:org_slf4j_slf4j_log4j12",
        "@ray_streaming_maven//:org_testng_testng",
    ],
    visibility = ["//visibility:public"],
)

define_java_module(
    name = "streaming-runtime",
        additional_srcs = [
            ":generate_java_streaming_fbs",
        ],
        additional_resources = [
            ":java_native_deps",
        ],
    deps = [
        "//java:org_ray_ray_api",
        "//java:org_ray_ray_runtime",
        ":org_ray_ray_streaming-api",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@ray_streaming_maven//:com_github_davidmoten_flatbuffers_java",
        "@ray_streaming_maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:org_slf4j_slf4j_log4j12",
    ],
    define_test_lib = True,
    test_deps = [
        "//java:org_ray_ray_api",
        "//java:org_ray_ray_runtime",
        ":org_ray_ray_streaming-api",
        ":org_ray_ray_streaming-runtime",
        "@ray_streaming_maven//:com_google_guava_guava",
        "@ray_streaming_maven//:org_slf4j_slf4j_api",
        "@ray_streaming_maven//:org_slf4j_slf4j_log4j12",
        "@ray_streaming_maven//:org_testng_testng",
    ],
    visibility = ["//visibility:public"],
)

java_binary(
    name = "all_streaming_tests",
    main_class = "org.testng.TestNG",
    data = ["testng.xml"],
    args = ["streaming/java/testng.xml"],
    runtime_deps = [
        ":org_ray_ray_streaming-api_test",
        ":org_ray_ray_streaming-runtime_test",
    ],
)

cc_flatbuffers_pkg = "ray/streaming/fbs/"
flatbuffers_generated_files = [
    "StreamingConfigKey.java",
    "StreamingRole.java",
    "StreamingStringPair.java",
    "StreamingUintPair.java",
    "StreamingConfig.java",
]

flatbuffer_java_library(
    name = "streaming_java_fbs",
    srcs = ["//streaming/src:streaming_fbs_file"],
    outs = [cc_flatbuffers_pkg + f for f in flatbuffers_generated_files],
    out_prefix = "",
)

filegroup(
    name = "modify_generated_java_flatbuffers_files_py_tool",
    srcs = ["modify_generated_java_flatbuffers_files.py"],
)

genrule(
    name = "generate_java_streaming_fbs",
    srcs = [
        ":streaming_java_fbs",
        ":modify_generated_java_flatbuffers_files_py_tool",
    ],
    outs = [
        "streaming-runtime/src/main/java/org/ray/streaming/queue/generated/" + file
            for file in flatbuffers_generated_files
    ],
    cmd = """
        for f in $(locations //streaming/java:streaming_java_fbs); do
            chmod +w $$f
            mv -f $$f $(@D)/streaming-runtime/src/main/java/org/ray/streaming/queue/generated
        done
        python $$(pwd)/streaming/java/modify_generated_java_flatbuffers_files.py $(@D)/../..
    """,
    local = 1,
)

filegroup(
    name = "java_native_deps",
    srcs = [
        "//streaming/src:streaming_java",
    ],
)

genrule(
    name = "copy_pom_file",
    srcs = [
        "//streaming/java:org_ray_ray_" + module + "_pom" for module in all_modules
    ],
    outs = ["copy_pom_file.out"],
    cmd = """
        set -x
        WORK_DIR=$$(pwd)
        cp -f $(location //streaming/java:org_ray_ray_streaming-api_pom) $$WORK_DIR/streaming/java/streaming-api/pom.xml
        cp -f $(location //streaming/java:org_ray_ray_streaming-runtime_pom) $$WORK_DIR/streaming/java/streaming-runtime/pom.xml
        echo $$(date) > $@
    """,
    local = 1,
    tags = ["no-cache"],
)

# Generates the dependencies needed by maven.
genrule(
    name = "gen_maven_deps",
    srcs = [
        ":generate_java_streaming_fbs",
        ":java_native_deps",
        ":copy_pom_file",
    ],
    outs = ["gen_maven_deps.out"],
    cmd = """
        set -x
        WORK_DIR=$$(pwd)
        # Copy native dependencies.
        NATIVE_DEPS_DIR=$$WORK_DIR/streaming/java/streaming-runtime/native_dependencies/
        rm -rf $$NATIVE_DEPS_DIR
        mkdir -p $$NATIVE_DEPS_DIR
        for f in $(locations //streaming/java:java_native_deps); do
            chmod +w $$f
            cp $$f $$NATIVE_DEPS_DIR
        done
        # Copy flatbuffer-generated files.
        GENERATED_DIR=$$WORK_DIR/streaming/java/streaming-runtime/src/main/java/org/ray/streaming/queue/generated
        rm -rf $$GENERATED_DIR
        mkdir -p $$GENERATED_DIR
        # Copy flatbuffers-generated files
        for f in $(locations //streaming/java:generate_java_streaming_fbs); do
            cp $$f $$GENERATED_DIR
        done
        echo $$(date) > $@
    """,
    local = 1,
    tags = ["no-cache"],
)
